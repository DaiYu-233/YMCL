using MinecraftLaunch.Modules.Installer;
using MinecraftLaunch.Modules.Models.Install;
using Panuon.UI.Silver;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace YMCL.Pages
{
    /// <summary>
    /// Lógica de interacción para NotesPage.xaml
    /// </summary>
    public partial class NotesPage : Page
    {
        public async void DownloadListRefresh()
        {
            await Task.Run(async () =>
            {
                GameCoreInstaller list = new(new(".minecraft"), "1.12.2");
                var res = (await list.GetGameCoresAsync()).Cores;
                res.ToList().ForEach(x =>
                {
                    if (x.Type is "release")
                        this.Dispatcher.BeginInvoke(() => { GameDownloadList.Items.Add(x); });
                });
            });
        }

        public NotesPage()
        {
            InitializeComponent();
            DownloadListRefresh();
        }



        private void GameListRefreshButton_Click(object sender, RoutedEventArgs e)
        {
            DownloadListRefresh();


        }

        private async void GameInstallButton_Click(object sender, RoutedEventArgs e)
        {

            var id = (GameDownloadList.SelectedItem as GameCoreEmtity)!.Id;
            await Task.Run(async () =>
            {
                GameCoreInstaller list = new(new(".minecraft"), id);
                var res = await list.InstallAsync(async x =>
                {
                    //await Dispatcher.BeginInvoke(() => { Debug.WriteLine(x.Item2); });
                    await Dispatcher.BeginInvoke(() => { DownloadProgress.Value = (x.Item1 * 100); });
                    await Dispatcher.BeginInvoke(() => { downloadingbfb.Text = ((x.Item1 * 100).ToString())+"%"; });

                    await Dispatcher.BeginInvoke(() => { GameInstallButton.IsEnabled = false; });
                    await Dispatcher.BeginInvoke(() => { GameInstallButton.Content = "安装中..."; });
                    await Dispatcher.BeginInvoke(() => { DownloadingTextBlock.Text = x.Item2; });
                });

                if (res.Success)
                {
                    await Dispatcher.BeginInvoke(() => { MessageBoxX.Show("安装成功! "); });
                    await Dispatcher.BeginInvoke(() => { GameInstallButton.IsEnabled = true; });
                    await Dispatcher.BeginInvoke(() => { GameInstallButton.Content = "安装此版本"; });
                    await Dispatcher.BeginInvoke(() => { DownloadProgress.Value = 0; });
                    await Dispatcher.BeginInvoke(() => { DownloadingTextBlock.Text = "Null"; });
                    await Dispatcher.BeginInvoke(() => { downloadingbfb.Text = "0%"; });

                }
                else
                {
                    await Dispatcher.BeginInvoke(() => { MessageBoxX.Show("安装失败! "); });
                    await Dispatcher.BeginInvoke(() => { GameInstallButton.IsEnabled = true; });
                    await Dispatcher.BeginInvoke(() => { GameInstallButton.Content = "安装此版本"; }); 
                    await Dispatcher.BeginInvoke(() => { DownloadingTextBlock.Text = "Null"; });
                    await Dispatcher.BeginInvoke(() => { downloadingbfb.Text = "0%"; });

                }
            });

        }



        private void GameDownloadList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            GameInstallButton.IsEnabled = true;
        }



        
    }
}
